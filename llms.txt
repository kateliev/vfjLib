Project Structure:
📁 vfjLib
├── 📁 Doc
│   └── 📄 placeholder.txt
├── 📁 Lib
│   ├── 📁 vfjLib
│   │   ├── 📄 __init__.py
│   │   ├── 📄 const.py
│   │   ├── 📄 object.py
│   │   ├── 📄 parser.py
│   │   └── 📄 proxy.py
│   └── 📁 vfjLib.egg-info
├── 📁 Tools
│   ├── 📄 vfj2git.py
│   └── 📄 vfj2single.py
├── 📄 .gitignore
├── 📄 devinst.py
├── 📄 LICENSE
├── 📄 README.md
├── 📄 requirements.txt
└── 📄 setup.py


<documents>
<document index="1">
<source>.gitattributes</source>
<document_content>
# Auto detect text files and perform LF normalization
* text=auto

</document_content>
</document>

<document index="2">
<source>.gitignore</source>
<document_content>
### Python template
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

### macOS template
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### JetBrains template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser


### Windows template
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk


</document_content>
</document>

<document index="3">
<source>LICENSE</source>
<document_content>
BSD 3-Clause License

Copyright (c) 2019, Vassil Kateliev
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Lib/vfjLib/__init__.py
# Language: python

import copy
import json
import json.scanner
import os
import shutil
from collections import OrderedDict
from vfjLib.const import cfg_vfj
from vfjLib.object import attribdict, dictextractor
from vfjLib.parser import string2filename, vfj_decoder, vfj_encoder
from vfjLib.proxy import jGlyph
from vfjLib.object import attribdict

class vfjFont(a, t, t, r, i, b, d, i, c, t):
    def __init__((self, vfj_path=None)):
    def __repr__((self)):
    def _vfj_read((self, vfj_path)):
    def _vfj_write((self, vfj_path, overwrite=True)):
    def _vfj_split((self, split_path, overwrite=False)):
        """Splits a single VFJ file into Split VFJ Format (folder)."""
    def _vfj_merge((self, merge_path)):
        """Merges a Split VFJ Format (folder) into single VFJ file."""
    def _vfj_rebuild_glyph_array((self)):
        """Reorders glyphs so that the base glyphs are first and glyphs that are references are last."""
    def _vfj_split_glyphs_master((self)):
        """Splits glyphs by master."""
    def _vfj_split_font_master((self)):
        """Split font into multiple single master fonts."""
    def save((self, vfj_path=None, split=False, overwrite=False)):
    def open((self, vfj_path=None, merge=False)):
    def getMasterNames((self)):
    def getGlyphSet((self, layer_name=None, use_cache=True, extend=None)):
    def getCharacterMapping((self, layer_name=None)):

def __init__((self, vfj_path=None)):

def __repr__((self)):

def _vfj_read((self, vfj_path)):

def _vfj_write((self, vfj_path, overwrite=True)):

def _vfj_split((self, split_path, overwrite=False)):
    """Splits a single VFJ file into Split VFJ Format (folder)."""

def _vfj_merge((self, merge_path)):
    """Merges a Split VFJ Format (folder) into single VFJ file."""

def _vfj_rebuild_glyph_array((self)):
    """Reorders glyphs so that the base glyphs are first and glyphs that are references are last."""

def _vfj_split_glyphs_master((self)):
    """Splits glyphs by master."""

def _vfj_split_font_master((self)):
    """Split font into multiple single master fonts."""

def save((self, vfj_path=None, split=False, overwrite=False)):

def open((self, vfj_path=None, merge=False)):

def getMasterNames((self)):

def getGlyphSet((self, layer_name=None, use_cache=True, extend=None)):

def getCharacterMapping((self, layer_name=None)):


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Lib/vfjLib/const.py
# Language: python

class cfg_vfj:
    def __init__((self)):

class cfg_filename:
    def __init__((self)):

def __init__((self)):

def __init__((self)):


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Lib/vfjLib/object.py
# Language: python

from collections import defaultdict

class dictextractor:
    """A collection of dicionary value extractors"""

class attribdict(d, e, f, a, u, l, t, d, i, c, t):
    """Default dictionary where keys can be accessed as attributes"""
    def __init__((self, *args, **kwdargs)):
    def __getattribute__((self, name)):
    def __setattr__((self, name, value)):
    def __delattr__((self, name)):
    def __repr__((self)):
    def __hash__((self)):
    def dir((self)):
    def factory((self, factory_type)):
    def lock((self)):
    def extract((self, search)):
        """Pull all values of specified key (search)"""
    def find((self, search, search_type=None)):
        """Pull all objects that contain keys of specified search."""
    def where((self, search_value, search_key=None)):
        """Pull all objects that contain values of specified search."""
    def contains((self, search, search_type=None)):
        """Does the object contain ANY value or nested object with given name (search)"""

def extract((obj, search)):
    """Pull all values of specified key (search)"""

def extract_helper((obj, search)):

def find((obj, search, search_type=None)):
    """Pull all objects that contain keys of specified search."""

def isisntance_plus((entity, test_type)):

def where_helper((obj, search)):

def where((obj, search_value, search_key=None)):
    """Pull all objects that contain values of specified search."""

def eq_plus((test, pass_test)):

def where_helper((obj, search_value)):

def contains((obj, search, search_type=None)):
    """Does the object contain ANY value or nested object with given name (search)"""

def isisntance_plus((entity, test_type)):

def contains_helper((obj, search)):

def __init__((self, *args, **kwdargs)):

def __getattribute__((self, name)):

def __setattr__((self, name, value)):

def __delattr__((self, name)):

def __repr__((self)):

def __hash__((self)):

def hash_helper((obj)):

def dir((self)):

def factory((self, factory_type)):

def lock((self)):

def extract((self, search)):
    """Pull all values of specified key (search)"""

def find((self, search, search_type=None)):
    """Pull all objects that contain keys of specified search."""

def where((self, search_value, search_key=None)):
    """Pull all objects that contain values of specified search."""

def contains((self, search, search_type=None)):
    """Does the object contain ANY value or nested object with given name (search)"""


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Lib/vfjLib/parser.py
# Language: python

import json
import json.scanner
from vfjLib.object import attribdict
from vfjLib.const import cfg_filename

class vfj_decoder(j, s, o, n, ., J, S, O, N, D, e, c, o, d, e, r):
    def __init__((self, *args, **kwdargs)):
    def L1_parse_object((self, *args, **kwdargs)):

class vfj_encoder(j, s, o, n, ., J, S, O, N, E, n, c, o, d, e, r):
    def __init__((self, *args, **kwdargs)):
    def default((self, obj)):

def __init__((self, *args, **kwdargs)):

def L1_parse_object((self, *args, **kwdargs)):

def __init__((self, *args, **kwdargs)):

def default((self, obj)):

def string2filename((string, suffix, mark_case=False)):


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Lib/vfjLib/proxy.py
# Language: python

from vfjLib.const import cfg_vfj
from vfjLib.object import attribdict
from vfjLib import vfjFont

class jPoint:
    """jPoint"""
    def __init__((self, x=None, y=None, transform=None)):
    def __repr__((self)):
    def dumps((self)):

class jNode:
    """jNode"""
    def __init__((
        self,
        x=None,
        y=None,
        node_type=None,
        node_smooth=False,
        node_g2=False,
        node_name=None,
        node_id=None,
        transform=None,
    )):
    def __repr__((self)):
    def dumps((self)):

class jContour:
    """jContour"""
    def __init__((self, jNodeList=[], is_open=False, contour_id=None, transform=None)):
    def __repr__((self)):
    def dumps((self)):

class jElement(a, t, t, r, i, b, d, i, c, t):
    """jElement"""
    def __init__((self, data)):
    def __repr__((self)):

class jComponent(a, t, t, r, i, b, d, i, c, t):
    """jComponent"""
    def __init__((self, data)):
    def __repr__((self)):

class jLayer(a, t, t, r, i, b, d, i, c, t):
    """jLayer"""
    def __init__((self, data)):
    def __repr__((self)):

class jGlyph(a, t, t, r, i, b, d, i, c, t):
    """jGlyph"""
    def __init__((self, data)):
    def __repr__((self)):

def __init__((self, x=None, y=None, transform=None)):

def __repr__((self)):

def tuple((self)):

def string((self)):

def dumps((self)):

def loads((string)):

def __init__((
        self,
        x=None,
        y=None,
        node_type=None,
        node_smooth=False,
        node_g2=False,
        node_name=None,
        node_id=None,
        transform=None,
    )):

def __repr__((self)):

def tuple((self)):

def string((self)):

def dumps((self)):

def loads((string)):

def __init__((self, jNodeList=[], is_open=False, contour_id=None, transform=None)):

def __repr__((self)):

def tuple((self)):

def string((self)):

def dumps((self)):

def loads((stringList, is_open=False, transform=None)):

def __init__((self, data)):

def __repr__((self)):

def __init__((self, data)):

def __repr__((self)):

def __init__((self, data)):

def __repr__((self)):

def __init__((self, data)):

def __repr__((self)):


<document index="4">
<source>README.md</source>
<document_content>
# vfjLib

Low-level reader and writer for FontLab JSON (VFJ) source font files

### Installation

```
pip install --user git+https://github.com/kateliev/vfjLib
```

### Usage

```python
>>> import vfjLib
>>> jfont = vfjLib.vfjFont('testfont.vfj')
>>> jfont.dir()
Attributes (Keys) map:
   .version                   <class 'int'>
   .font                      <class 'vfjLib.object.attribdict'>
   .workspace                 <class 'vfjLib.object.attribdict'>
>>> jfont.font
<attribdict: 11>
>>> jfont.font.dir()
Attributes (Keys) map:
   .glyphsCount               <class 'int'>
   .upm                       <class 'int'>
   .glyphs                    <class 'list'>
   .interpolationFlags        <class 'int'>
   .classes                   <class 'list'>
   .openTypeFeatures          <class 'list'>
   .hinting                   <class 'vfjLib.object.attribdict'>
   .info                      <class 'vfjLib.object.attribdict'>
   .meta                      <class 'vfjLib.object.attribdict'>
   .settings                  <class 'vfjLib.object.attribdict'>
   .masters                   <class 'list'>
>>> jfont.font.glyphs[-1].layers[0].elements[0].component.glyphName
'l'
>>> jfont.font.glyphs[-1].layers[0].elements[0].component.glyphName = 'n'
>>> jfont.font.glyphs[-1].layers[0].elements[0].component.glyphName
'n'
>>> jfont.save('savedfont.vfj')
```

### License

- Copyright (c) 2019, Vassil Kateliev. All rights reserved.
- [BSD 3-Clause License](./LICENSE)

</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Tools/vfj2git.py
# Language: python

import os
import sys
import vfjLib


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/Tools/vfj2single.py
# Language: python

import os
import sys
import vfjLib


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/devinst.py
# Language: python

import os
import sys
from distutils.sysconfig import get_python_lib

def installModule((srcDir, modulePathName)):


# File: /Users/adam/Developer/vcs/github.twardoch/pub/vfjLib/setup.py
# Language: python

import re
import sys
from codecs import open
from os import path
from setuptools import find_packages, setup

def get_version((*args)):

def get_absolute_path((*args)):
    """Transform relative pathnames into absolute pathnames."""

def get_description((*args)):

def get_requirements((*args)):
    """Get requirements from pip requirement files."""


</documents>